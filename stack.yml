AWSTemplateFormatVersion: '2010-09-09'
Description: VPC & subnet create

Parameters:
  EnvType: 
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues: 
      - dev
      - mnt
      - prd
    ConstraintDescription: must specify dev or mnt or prd.

  ProjectId:
    Description: Project name id.
    Type: String
    MinLength: 8
    MaxLength: 24
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must specify Project id.

  KeyPair:
    Description: key-test
    Type: AWS::EC2::KeyPair::KeyName

  DBPassword:
    Default: root1234
    NoEcho: true
    Description: The database admin account password
    Type: String
    MinLength: 8

Mappings:
  StackConfig:
    EC2:
      ImageId: 'ami-5587c633'

Resources:
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "vpc", "Ref":"EnvType" , "Ref":"ProjectId" ] ]

# Create Public RouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "rt-pub", "Ref":"EnvType" , "Ref":"ProjectId" ] ]

# Create Private RouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "rt-pri", "Ref":"EnvType" , "Ref":"ProjectId" ] ]

# Create Public Subnet A
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "ap-northeast-1a"
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "subnet-pub", "Ref":"EnvType" , "Ref":"ProjectId" ] ]

  PubSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

# Create Private Subnet A
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "ap-northeast-1a"
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "subnet-pri", "Ref":"EnvType" , "Ref":"ProjectId" ] ]
  
  PriSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "ap-northeast-1c"
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "subnet-pri", "Ref":"EnvType" , "Ref":"ProjectId" ] ]
  
  PriSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  DbSubnet:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Private Subnet
      SubnetIds: [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]
  
# Create InternetGateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "igw", "Ref":"EnvType" , "Ref":"ProjectId"] ]

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SecurityGroupA:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: TESTSG
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'TESTSG'
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: '30225'
        ToPort: '30225'
        CidrIp: 58.12.62.59/32

  SecurityGroupRDS:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: 'RDS SG'
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'RDS SG'
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 10.0.1.0/24

  EC2Instance01:
    Type: 'AWS::EC2::Instance'
    Properties:
      # EBS設定
      BlockDeviceMappings:
        - DeviceName: '/dev/xvda'
          Ebs:
            VolumeType: 'gp2'
            VolumeSize: 8 
      ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
      # シャットダウン時の動作
      InstanceInitiatedShutdownBehavior: 'stop'
      # インスタンスタイプ
      InstanceType: 't2.micro'
      # キーペア
      KeyName: !Ref KeyPair
      # 詳細モニタリング設定
      Monitoring: false
      # セキュリティグループ
      SecurityGroupIds:
        - !GetAtt SecurityGroupA.GroupId
      # サブネット
      SubnetId: !Ref PublicSubnetA
      # テナンシー
      Tenancy: 'default'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
      # タグ
      Tags:
      - Key: 'Name'
        Value: 'Test01'

  DbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      AllocatedStorage: 5
      MasterUsername: root
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref DbSubnet
      VPCSecurityGroups:
      - !Ref SecurityGroupRDS
      MasterUserPassword: { "Fn::Join" : [ "", [ { "Ref": "DBPassword" }, "!Z3" ] ] }
      # DeletionPolicy: Snapshot

Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"

  StackPubSubnetA:
    Description: The ID of the VPC Subnet
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetA"

  StackPriSubnetA:
    Description: The ID of the VPC Subnet
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetA"

